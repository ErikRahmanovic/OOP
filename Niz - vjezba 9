//a) Napišite klasu Niz s jednom generičkim parametrom koja se može instancirati
//
//na sljedeći način :
//
//
//vector<int> v1 = { 1, 2, 3 };
//
//vector<int> v2 = { 11, 0, 13 };
//
//Niz<int> p1(v1);
//
//Niz<int> p2(v2);
//
//
//b) Klasa Niz treba imati metodu "manje_od" s jednim parametrom tip const Niz &
//
//koja uspoređuje svoj niz(postavljen kod inicijalizacije) s nizom u parametru i
//
//vraća 1 ako su svi elementi vektora ovog objekta manji od svakog elementa
//
//vektora parametra, inače vraća 0.
//
//
//c) Upotrebom predložaka napišite nečlanski operator < tako da taj operator
//
//    vraća rezultat metode "manje_od" kao rezultat usporedbe.Na primjer,
//
//
//    vector<int> v1 = { 1, 2, 3 };
//
//vector<int> v2 = { 11, 0, 13 };
//
//Niz<int> p1(v1);
//
//Niz<int> p2(v2);
//
//cout << (p1 < p2) << endl;  // operator <
//
//
//d) Upotrebom predložaka napišite operator >= koji vraća 1 samo ako operator <
//
//    vraća 0 za zadane parametre.
//
//
//    e) Napišite klasu Niz2 koja radi kao klasa Niz, s tim da je operator <
//
//    definiran kao članska funkcija.

#include <iostream>
#include <vector>

using namespace std;

template<class T>
class Niz {
public:
    vector<T> brojevi;

    Niz(vector<T> _brojevi) : brojevi(_brojevi) {}

    bool manje_od(const Niz<T>& niz) const{
        for (int i = 0; i < brojevi.size(); i++) {
            if (brojevi[i] >= niz.brojevi[i]) {
                return false;
            }
        }
    }
};

template<class T>
class Niz2 {
public:
    vector<T> brojevi;

    Niz2(vector<T> _brojevi) : brojevi(_brojevi) {}

    bool operator<(const Niz2<T>& niz) const {
        return manje_od(niz);
    }

    bool manje_od(const Niz2<T>& niz) const {
        for (int i = 0; i < brojevi.size(); i++) {
            if (brojevi[i] >= niz.brojevi[i]) {
                return false;
            }
        }
    }

};

template<class T>
bool operator<(const Niz<T>& niz1, const Niz<T>& niz2) {
    return niz1.manje_od(niz2);
}

template<class T>
bool operator>=(const Niz<T>& niz1, const Niz<T>& niz2) {
    if (niz1 < niz2 == false) {
        return true;
    }
}





int main() {
    vector<int> v1 = { 1, 2, 3 };
    vector<int> v2 = { 11, 0, 13 };

    Niz<int> p1(v1);
    Niz<int> p2(v2);

    cout << (p1 < p2) << endl;  // operator <

    Niz2<int> p3(v1);
    Niz2<int> p4(v2);
    
    cout << (p3 < p4) << endl;

    return 0;
}
